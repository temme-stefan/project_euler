import {factorization} from "../../../reusable/primes.js";
import {sequence} from "../../../reusable/myMath.js";

console.log("Distinct powers");
console.log(`Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?`);
console.log('https://projecteuler.net/problem=29\n');

const max_a = 100;
const max_b = 100;
let termsCount = 0;

for (let a = 2; a <= max_a; a++) {
    const fact = factorization(a);
    const check = fact.every(f => f[1] > 1 && f[1] == fact[0][1]);
    if (check) {
        //all factor amounts are equal and >1
        //there might be duplicates
        const base = fact.reduce((a, b) => a * b[0], 1);
        const basePower = fact[0][1];
        const cand = sequence(max_b - 1, 2 * basePower, basePower);
        const test = sequence(basePower - 1, 1);
        const filtered = cand.filter(x => test.every(t => x > t * max_b || x % t != 0));
        termsCount += filtered.length;
    } else {
        termsCount += max_b - 1;
    }
}

// const checkSet = new Set();
// for (let a = 2; a <= max_a; a++) {
//     for (let b = 2; b <= max_b; b++) {
//         if (checkSet.has(Math.pow(a, b))) {
//             console.log(a, b, Math.pow(a, b));
//         }
//         checkSet.add(Math.pow(a, b));
//     }
// }
// console.log(checkSet.size)

const result = termsCount;
console.log("Solution:", result);

